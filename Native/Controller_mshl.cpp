//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#include "nanoFramework_Hardware_Esp32_DynamicIndication.h"
#include "Controller.h"

using namespace nanoFramework::Hardware::Esp32::DynamicIndication;


HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeDispose___VOID( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        Controller::NativeDispose( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeInit___VOID__SZARRAY_I4__SZARRAY_I4__I4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_INT32 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 1, param0 ) );

        CLR_RT_TypedArray_INT32 param1;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32_ARRAY( stack, 2, param1 ) );

        signed int param2;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_INT32( stack, 3, param2 ) );

        Controller::NativeInit( pMngObj,  param0, param1, param2, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeIsEnabled___BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        bool retVal = Controller::NativeIsEnabled( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeSetEnabled___VOID__BOOLEAN( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        bool param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_bool( stack, 1, param0 ) );

        Controller::NativeSetEnabled( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeSetData___VOID__SZARRAY_U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_UINT32 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 1, param0 ) );

        Controller::NativeSetData( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeSetUpdateInterval___VOID__U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        unsigned int param0;
        param0 = stack.ArgN( 1 ).NumericByRef().u4;
        NANOCLR_CHECK_HRESULT(param0);
        //NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32( stack, 1, param0 ) );

        Controller::NativeSetUpdateInterval( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeGetUpdateInterval___U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        unsigned int retVal = Controller::NativeGetUpdateInterval( pMngObj,  hr );
        NANOCLR_CHECK_HRESULT( hr );
        stack.SetResult( retVal, DATATYPE_U4 );
        //SetResult_UINT32( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}

HRESULT Library_nanoFramework_Hardware_Esp32_DynamicIndication_nanoFramework_Hardware_Esp32_DynamicIndication_Controller::NativeTest1___BOOLEAN__SZARRAY_U4( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER(); hr = S_OK;
    {
        CLR_RT_HeapBlock* pMngObj = Interop_Marshal_RetrieveManagedObject( stack );

        FAULT_ON_NULL(pMngObj);

        CLR_RT_TypedArray_UINT32 param0;
        NANOCLR_CHECK_HRESULT( Interop_Marshal_UINT32_ARRAY( stack, 1, param0 ) );

        bool retVal = Controller::NativeTest1( pMngObj,  param0, hr );
        NANOCLR_CHECK_HRESULT( hr );
        SetResult_bool( stack, retVal );

    }
    NANOCLR_NOCLEANUP();
}
